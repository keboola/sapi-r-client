% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/client.R
\docType{class}
\name{SapiClient-class}
\alias{SapiClient}
\alias{SapiClient-class}
\title{Client for working with Keboola Connection Storage API.}
\description{
Client for working with Keboola Connection Storage API.
}
\section{Methods}{

\describe{
\item{\code{bucketExists(bucketId)}}{Check that a bucket exists.
\subsection{Parameters}{\itemize{
\item{\code{bucketId} Bucket ID.}
}}
\subsection{Return Value}{TRUE or FALSE}}

\item{\code{createBucket(name, stage, description, backend = "redshift")}}{Create a new bucket.
\subsection{Parameters}{\itemize{
\item{\code{name} Name of the bucket.}
\item{\code{stage} One of \code{in}, \code{out}, \code{sys}.}
\item{\code{description} Arbitrary description of the bucket.}
\item{\code{name} Database backend - eithe \code{mysql} or \code{redshift}.}
}}
\subsection{Return Value}{List with bucket details.}}

\item{\code{createCredentials(bucketId, credentialsName)}}{Create read-only redshift credentials for a given bucket.
\subsection{Parameters}{\itemize{
\item{\code{bucketId} Bucket ID.}
\item{\code{credentialsName} Descriptive name for the credentials.}
}}
\subsection{Return Value}{List with redshift credentials}}

\item{\code{decodeResponse(response)}}{Internal method to process API response.
\subsection{Parameters}{\itemize{
\item{\code{response} List as returned from httr POST/GET method.}
}}
\subsection{Return Value}{Response body - either list or string in case the body cannot be parsed as JSON.}}

\item{\code{deleteBucket(bucketId)}}{Delete a bucket.
\subsection{Parameters}{\itemize{
\item{\code{bucketId} String ID of the bucket.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{deleteComponentConfiguration(componentId, configId)}}{DELETE the provided component configuration.  CAUTION: this action is irreversible.
\subsection{Parameters}{\itemize{
\item{\code{componentId} ID of the component}
\item{\code{configId} ID of the configuration}
}}
\subsection{Return Value}{TRUE}}

\item{\code{deleteCredentials(credentialsId)}}{Delete redshift credentials.
\subsection{Parameters}{\itemize{
\item{\code{credentialsId} Credentials ID}
}}
\subsection{Return Value}{TRUE}}

\item{\code{deleteTable(tableId)}}{Delete a table.
\subsection{Parameters}{\itemize{
\item{\code{tableId} String ID of the table (including bucket ID).}
}}
\subsection{Return Value}{TRUE}}

\item{\code{genericDelete(urlD, query = NULL)}}{Generic DELETE method.
\subsection{Parameters}{\itemize{
\item{\code{urlD} Target URL.}
\item{\code{query} Query parameters.}
}}
\subsection{Return Value}{TRUE for success. Will throw error if status code returned is not 204.}}

\item{\code{genericGet(urlG, query = NULL)}}{Generic POST method.
\subsection{Parameters}{\itemize{
\item{\code{urlG} Target URL.}
\item{\code{query} Query parameters.}
}}
\subsection{Return Value}{Decoded JSON body as a list of items.}}

\item{\code{genericPost(urlP, data = NULL)}}{Generic POST method.
\subsection{Parameters}{\itemize{
\item{\code{urlP} Target URL.}
\item{\code{data} Body of the request.}
}}
\subsection{Return Value}{Decoded JSON body as a list of items.}}

\item{\code{get(urlG, query = NULL)}}{Generic GET method.
\subsection{Parameters}{\itemize{
\item{\code{urlG} Target URL.}
\item{\code{query} List of query arguments ex. list(foo = bar).}
}}
\subsection{Return Value}{List with HTTP response.}}

\item{\code{getBucket(bucketId)}}{Get bucket information.
\subsection{Parameters}{\itemize{
\item{\code{bucketId} Bucket ID.}
}}
\subsection{Return Value}{List with bucket details.}}

\item{\code{getComponentConfiguration(componentId, configId)}}{Get KBC Component Configuration.
\subsection{Parameters}{\itemize{
\item{\code{componentId} ID of the component}
\item{\code{configId} ID of the configuration}
}}
\subsection{Return Value}{List containing component configuration}}

\item{\code{getCredentials(credentialsId)}}{List read-only redshift credentials with a given name.
\subsection{Parameters}{\itemize{
\item{\code{credentialsId} Credentials name.}
}}
\subsection{Return Value}{List with redshift credentials}}

\item{\code{getFileData(fileInfo)}}{Get a file from the S3 storage
\subsection{Parameters}{\itemize{
\item{\code{list} File info list object (see \code{getFileInfo())}.}
}}
\subsection{Return Value}{Data frame with file contents}}

\item{\code{getFileInfo(fileId, federationToken = TRUE)}}{Get information about a file, including credentials.
\subsection{Parameters}{\itemize{
\item{\code{fileId} Storage file ID.}
\item{\code{federationToken} Use federation token?.}
}}
\subsection{Return Value}{List with file information}}

\item{\code{getJobStatus(url)}}{Make a status request to an async syrup job
\subsection{Parameters}{\itemize{
\item{\code{url} This will normally be the url returned from the 
createTableAsync/importTableAsync methods.}
}}
\subsection{Return Value}{List with job details}}

\item{\code{getTable(tableId)}}{Get table information.
\subsection{Parameters}{\itemize{
\item{\code{tableId} Table ID (including bucket ID).}
}}
\subsection{Return Value}{List with table details.}}

\item{\code{importTable(tableId, options = list())}}{Import a table from Storage into R. Wrapper for the \code{importTableAsync} function.
\subsection{Parameters}{\itemize{
\item{\code{tableId} String table ID (including bucket ID).}
\item{\code{options} List with additional options.}
}}
\subsection{Return Value}{data.frame with table contents.}}

\item{\code{importTableAsync(tableId, options = list())}}{Begin an export job of a table.
\subsection{Parameters}{\itemize{
\item{\code{tableId} String table Id (including bucket ID).}
\item{\code{options} List with additional parameters.}
}}
\subsection{Return Value}{URL to ping for table creation status check.}}

\item{\code{initialize(token, url = "https://connection.keboola.com/v2/",
  userAgent = "Keboola StorageApi R Client/v2")}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{token} KBC Storage API token.}
\item{\code{url} Optional URL of the provisioning API.}
}}
\subsection{Return Value}{Another return value}}

\item{\code{listBuckets(options = list())}}{Get a list of all buckets.
\subsection{Parameters}{\itemize{
\item{\code{options} List with additional options.}
}}
\subsection{Return Value}{List of buckets.}}

\item{\code{listCredentials()}}{List read-only redshift credentials.
\subsection{Return Value}{List with redshift credentials}}

\item{\code{listTables(bucket = NULL, options = list())}}{Get a list of all tables.
\subsection{Parameters}{\itemize{
\item{\code{bucket} Bucket ID (if empty, list all tables).}
\item{\code{options} List with additional options.}
}}
\subsection{Return Value}{List of tables.}}

\item{\code{newComponentConfiguration(componentId, configurationId, name,
  description = "")}}{Create a new component configuration.
Note that the configuration property must be put in a subsequent PUT call.
\subsection{Parameters}{\itemize{
\item{\code{configurationId} Configuration ID.}
\item{\code{name} Name of the cconfiguration
\item{\code{description} Descriptiion for the configuration.}
}}
\subsection{Return Value}{List with component configuration}}

\item{\code{prepareOptions(options)}}{Internal helper for parsing options
\subsection{Parameters}{\itemize{
\item{\code{options} List.}
}}
\subsection{Return Value}{List with options}}

\item{\code{putComponentConfiguration(componentId, configId, configuration)}}{PUT the configuration property of the KBC Component Configuration.
\subsection{Parameters}{\itemize{
\item{\code{componentId} ID of the component}
\item{\code{configId} ID of the configuration}
\item{\code{configuration} the configuration property (should be of type list)}
}}
\subsection{Return Value}{list of the new component configuration}}

\item{\code{s3GET(region, url, credentials, target)}}{Get a file (or file chunk) from AWS S3 storage.
\subsection{Parameters}{\itemize{
\item{\code{region} AWS file region.}
\item{\code{url} file URL to get.}
\item{\code{credentials} List with file credentials (secret and access key).}
\item{\code{target} String file to which contents will be appended.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{saveTable(df, bucket, tableName, fileName = "tmpfile.csv", options = list())}}{Save a table to Storage. Wrapper for the \code{saveTableAsync} function.
\subsection{Parameters}{\itemize{
\item{\code{df} data.frame to save.}
\item{\code{bucket} String bucket ID.}
\item{\code{tableName} String table name.}
\item{\code{fileName} String name of temporary file to use, will be deleted when done.}
\item{\code{options} List with additional options.}
}}
\subsection{Return Value}{String job ID}}

\item{\code{saveTableAsync(bucket, tableName, fileId, opts = list())}}{Create/Overwrite a new table in a bucket ascynchronously.
Generally use the \code{saveTable} method
\subsection{Parameters}{\itemize{
\item{\code{bucket} Storage bucket ID.}
\item{\code{tableName} Table name.}
\item{\code{fileId} Id of file received from the \code{uploadFile} method.}
\item{\code{opts} List with additional parameters.}
}}
\subsection{Return Value}{URL to ping for table creation status check.}}

\item{\code{tableExists(tableId)}}{Check that a bucket exists.
\subsection{Parameters}{\itemize{
\item{\code{tableId} Table ID (including bucket ID).}
}}
\subsection{Return Value}{TRUE or FALSE}}

\item{\code{uploadFile(dataFile, options = list())}}{Upload a file to AWS S3 bucket.
(compression is not yet supported by this client)
\subsection{Parameters}{\itemize{
\item{\code{string} File to upload.}
\item{\code{options} List options. (For a full list of options please see the api docs).}
}}
\subsection{Return Value}{Integer file ID of the uploaded file.}}

\item{\code{verifyToken()}}{Get details of the current token
\subsection{Return Value}{List containing details of this client's token}}
}}

